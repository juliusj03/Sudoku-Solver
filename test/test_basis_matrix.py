import pytest
from project.Hints.basis_matrix import Basis
from project.Sudoku.Sudoku import Sudoku


@pytest.fixture
def sudoku_ins(request):
    """Creates an initialized Sudoku class with specified parameters"""
    sudoku_data = request.param
    return Sudoku(sudoku_data, len(sudoku_data))


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_check_type(sudoku_ins):
    """Test the check_type method."""
    basis_ins = Basis(sudoku_ins)
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert basis_ins.check_type([[[1, 2, 3], [4], [5, 6], [7]]]) is True, \
            'Incorrect result for check_type, expected True'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert basis_ins.check_type([[[1, 2], [6, 7], [6], [7, 8, 9]]]) is True, \
            'Incorrect result for check_type, expected True'
    else:
        assert basis_ins.check_type([[[1, 2], [6, 7], [6], [7, 8, 9]]]) is True, \
            'Incorrect result for check_type, expected True'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_sud_to_values(sudoku_ins):
    """Test the sud_to_values method."""
    basis_ins = Basis(sudoku_ins)
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert basis_ins.sud_to_values(sudoku_ins)[:2] == [[2, 0, 0, 0], [0, 1, 0, 2]], \
            'Incorrect result for sud_to_values'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert (basis_ins.sud_to_values(sudoku_ins)[:2] ==
                [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0]]), \
            'Incorrect result for sud_to_values'
    else:
        assert (basis_ins.sud_to_values(sudoku_ins)[:2] ==
                [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
                 [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0]]), \
            'Incorrect result for sud_to_values'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_sud_to_posnum(sudoku_ins):
    """Test the sud_to_posnum method."""
    basis_ins = Basis(sudoku_ins)
    basis_ins.all_options(sudoku_ins)
    result = basis_ins.sud_to_posnum(sudoku_ins)[:2]
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [[[2], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],
                          [[1, 2, 3, 4], [1], [1, 2, 3, 4], [2]]], \
            'Incorrect result for sud_to_values'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == [[[5], [3], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [7],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9],  [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[6],
                            [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
                            [1], [9], [5], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9],
                                                          [1, 2, 3, 4, 5, 6, 7, 8, 9]]], \
            'Incorrect result for sud_to_values'
    else:
        assert result == [[[16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [10], [4], [14],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [7],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [9],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [13],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]],
                          [[15], [6], [8], [11],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [13],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [5],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [10], [7],
                           [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]], \
            'Incorrect result for sud_to_values'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_get_sudoku(sudoku_ins):
    """Test the get_sudoku method."""
    basis_ins = Basis(sudoku_ins)
    basis_ins.all_options(sudoku_ins)
    result = basis_ins.sud_to_posnum(sudoku_ins)[:2]
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result is not None, 'Incorrect result for get_sudoku, expected Sudoku instance'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result is not None, 'Incorrect result for get_sudoku, expected Sudoku instance'
    else:
        assert result is not None, 'Incorrect result for get_sudoku, expected Sudoku instance'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_options(sudoku_ins):
    """Test the 'options' method."""
    basis_ins = Basis(sudoku_ins)
    result = basis_ins.options()[:2]
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [[[2], [3, 4], [1, 4], [1, 3]], [[3, 4], [1], [4], [2]]], \
            'Incorrect result for options, expected list of lists of possiblenum'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == [[[5], [3], [1, 2, 4], [2, 6], [7], [2, 4, 6, 8], [1, 4, 8, 9],
                           [1, 2, 4, 9], [2, 4, 8]], [[6], [2, 4, 7], [2, 4, 7], [1],
                                                      [9], [5], [3, 4, 7, 8], [2, 3, 4],
                                                      [2, 4, 7, 8]]], \
            'Incorrect result for options, expected list of lists of possiblenum'
    else:
        assert result == [[[16], [1], [2, 5, 12], [1, 2, 5], [2, 3, 5, 6, 12], [10], [4], [14],
                           [2, 3, 6, 12], [7], [3, 6, 12], [9], [1, 11, 12], [13],
                           [1, 2, 6, 12, 15], [1, 2, 6, 8, 12, 15]],
                          [[15], [6], [8], [11], [2, 3, 12, 16], [2, 3, 9], [2, 9, 12, 16],
                           [2, 3, 12, 16], [13], [4, 12, 14], [3, 4, 12, 14], [5],
                           [1, 9, 12, 14], [10], [7], [1, 2, 12, 14]]], \
            'Incorrect result for options, expected list of lists of possiblenum'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_values(sudoku_ins):
    """Test the 'values' method."""
    basis_ins = Basis(sudoku_ins)
    result = basis_ins.values()[:2]
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [[2, 0, 0, 0], [0, 1, 0, 2]], \
            'Incorrect result for values, expected list of lists of values'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0]], \
            'Incorrect result for values, expected list of lists of values'
    else:
        assert result == [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
                          [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0]], \
            'Incorrect result for values, expected list of lists of values'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [3, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_row_to_columns(sudoku_ins):
    """Test the row_to_columns method."""
    basis_ins = Basis(sudoku_ins)
    result = basis_ins.row_to_columns(sudoku_ins).editablegrid[0][1]
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == 3, 'Incorrect value for (1, 0), expected 3'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == 6, 'Incorrect value for (1, 0), expected 6'
    else:
        assert result == 15, 'Incorrect value for (1, 0), expected 15'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [3, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 1, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_row_to_blocks(sudoku_ins):
    """Test the row_to_blocks method."""
    basis_ins = Basis(sudoku_ins)
    result = basis_ins.row_to_blocks(sudoku_ins).editablegrid[0][3]
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == 1, 'Incorrect value for (1, 1), expected 1'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == 6, 'Incorrect value for (1, 0), expected 6'
    else:
        assert result == 1, 'Incorrect value for (0, 3), expected 1'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [3, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 1, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_all_options(sudoku_ins):
    """Test the all_options method."""
    basis_ins = Basis(sudoku_ins)
    result = basis_ins.all_options(sudoku_ins).editablegrid[0][2].possiblenum
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [1, 2, 3, 4], \
            'Incorrect value for row, col (0, 2), expected [1, 2, 3, 4]'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == [1, 2, 3, 4, 5, 6, 7, 8, 9], \
            'Incorrect value for row, col (0, 2), expected [1, 2, 3, 4, 5, 6, 7, 8, 9]'
    else:
        assert result == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], \
            ('Incorrect value for row, col (0, 2), '
             'expected [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]')


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [3, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 1, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_remove_doubles(sudoku_ins):
    """Test the remove_doubles method."""
    basis_ins = Basis(sudoku_ins)
    options = basis_ins.all_options(sudoku_ins)
    result = basis_ins.remove_doubles(options).editablegrid[0][2].possiblenum
    if basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [1, 3, 4], 'Incorrect value for row, col (0, 2), expected [1, 3, 4]'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == [1, 2, 4, 6, 8, 9], \
            'Incorrect value for row, col (0, 2), expected [1, 2, 4, 6, 8, 9]'
    else:
        assert result == [2, 3, 5, 6, 8, 11, 12, 15], \
            'Incorrect value for row, col (0, 2), expected [2, 3, 5, 6, 8, 11, 12, 15]'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 0, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_get_diagonal(sudoku_ins):
    """Test the get_diagonal method."""
    basis_ins = Basis(sudoku_ins, 'diagonal')
    result = basis_ins.get_diagonal(1, 1)
    if basis_ins.sudoku.editablegrid[0][0] == 2:
        assert result == [2, 1, 3, 4], \
            'Incorrect value for diagonal left to right, expected [2, 1, 3, 4]'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == [5, 8, 2, 9], \
            'Incorrect value for diagonal left to right, expected [5, 8, 2, 9]'
    else:
        assert result == [16, 3, 14, 2, 2, 5, 11], \
            'Incorrect value for diagonal left to right, expected [16, 3, 14, 2, 2, 5, 11]'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 0, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_get_chess(sudoku_ins):
    """Test the get_chess method."""
    basis_ins = Basis(sudoku_ins, 'chess')
    result = basis_ins.get_chess(0, 3)
    if basis_ins.sudoku.editablegrid[0][0] == 2:
        assert result == [1, 3], 'Incorrect value for diagonal left to right, expected [1, 3]'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result == [5, 8], 'Incorrect value for diagonal left to right, expected [5, 8]'
    else:
        assert result == [15, 3], 'Incorrect value for diagonal left to right, expected [15, 3]'


@pytest.mark.parametrize(
    "sudoku_ins",
    [
        [[2, 0, 0, 0],
         [0, 1, 0, 2],
         [0, 0, 3, 0],
         [0, 0, 0, 4]
         ],
        [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        ],
        [[16, 0, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
         [15, 0, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
         [0, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
         [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
         [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
         [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
         [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
         [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
         [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
         [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
         [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
         [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
         [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
         [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
         [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
         [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
    ],
    indirect=True,
)
def test_check_mistake(sudoku_ins):
    """Test the check mistake method."""
    basis_ins = Basis(sudoku_ins, 'chess')
    result = basis_ins.check_mistake()
    if basis_ins.sudoku.editablegrid[0][0] == 2:
        assert result is True, 'Incorrect, expected True'
    elif basis_ins.sudoku.originalgrid[0][0] == 5:
        assert result is False, 'Incorrect, expected False'
    else:
        assert result is False, 'Incorrect, expected False'
