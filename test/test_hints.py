import pytest
from project.Hints.basis_matrix import Basis
from project.Hints.hints import Hints
from project.Sudoku.Sudoku import Sudoku


@pytest.fixture
def basis_ins(request):
    """Creates an initialized Basis class with specified parameters"""
    sudoku_data = request.param
    return Basis(Sudoku(sudoku_data, len(sudoku_data)))


@pytest.mark.parametrize(
    "basis_ins",
    [
        [
    [1, 2, 0, 4, 5, 6, 7, 0, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 2, 3, 0, 0, 0, 0, 0, 0],
    [0, 5, 6, 0, 0, 0, 0, 0, 0],
    [7, 8, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [2, 4, 0, 0],
    [0, 0, 0, 2],
    [4, 0, 3, 0],
    [0, 0, 0, 4]
        ],
        [
       [16, 2, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
       [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
       [7, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
       [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
       [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
       [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
       [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
       [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
       [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
       [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
       [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
       [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
       [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
       [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
       [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
       [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
            ],
    indirect=True,
)
def test_combined(basis_ins):
    """Test the combined method."""
    hints = Hints(basis_ins)
    result = hints.combined([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])
    assert result == [[1, 2, 3, 4], [5, 6, 7, 8]], 'Incorrect combined result'


@pytest.mark.parametrize(
    "basis_ins",
    [
        [
    [1, 2, 0, 4, 5, 6, 7, 0, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 2, 3, 0, 0, 0, 0, 0, 0],
    [0, 5, 6, 0, 0, 0, 0, 0, 0],
    [7, 8, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [2, 4, 0, 0],
    [0, 0, 0, 2],
    [4, 0, 3, 0],
    [0, 0, 0, 4]
        ],
        [
       [16, 2, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
       [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
       [7, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
       [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
       [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
       [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
       [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
       [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
       [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
       [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
       [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
       [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
       [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
       [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
       [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
       [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
            ],
    indirect=True,
)
def test_conv_index_to_coord(basis_ins):
    """Test the conv_index_to_coord method."""
    hints_ins = Hints(basis_ins)
    if basis_ins.sudoku.originalgrid[2][0] == 0:
        assert (hints_ins.conv_index_to_coord(4, 'row') ==
                [[4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8]]), \
            'Incorrect conv_index_to_coord result'
    elif basis_ins.sudoku.originalgrid[0][1] == 0:
        assert (hints_ins.conv_index_to_coord(2, 'column') ==
                [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], [7, 2], [8, 2]]), \
            'Incorrect conv_index_to_coord result'
    elif basis_ins.sudoku.originalgrid[0][0] == 2:
        assert hints_ins.conv_index_to_coord(2, 'row') == [[2, 0], [2, 1], [2, 2], [2, 3]], \
            'Incorrect conv_index_to_coord result'
    elif basis_ins.sudoku.originalgrid[0][0] == 16:
        assert hints_ins.conv_index_to_coord(2, 'row') == [[2, 0], [2, 1], [2, 2], [2, 3],
                                                           [2, 4], [2, 5], [2, 6], [2, 7], [2, 8],
                                                           [2, 9], [2, 10], [2, 11], [2, 12],
                                                           [2, 13], [2, 14], [2, 15]], \
            'Incorrect conv_index_to_coord result'
    else:
        assert (hints_ins.conv_index_to_coord(2, 'block') ==
                [[0, 6], [1, 6], [2, 6], [0, 7], [1, 7], [2, 7], [0, 8], [1, 8], [2, 8]]), \
            'Incorrect conv_index_to_coord result'


@pytest.mark.parametrize(
    "basis_ins",
    [
        [
    [1, 2, 0, 4, 5, 6, 7, 8, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 2, 3, 0, 0, 0, 0, 0, 0],
    [0, 5, 6, 0, 0, 0, 0, 0, 0],
    [7, 8, 9, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [2, 4, 0, 0],
    [0, 0, 0, 2],
    [4, 0, 3, 0],
    [0, 0, 0, 4]
        ],
        [
       [16, 2, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
       [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
       [7, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
       [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
       [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
       [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
       [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
       [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
       [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
       [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
       [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
       [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
       [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
       [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
       [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
       [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
            ],
    indirect=True,
)
def test_hidden_singles(basis_ins):
    """Test the hidden_singles method."""
    hints_ins = Hints(basis_ins)
    result = list(hints_ins.hidden_singles())[:1]
    if basis_ins.sudoku.originalgrid[2][0] == 0:
        assert result == [('row', 3, [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4],
                                      [0, 5], [0, 6], [0, 7], [0, 8]])], \
            'Incorrect hidden_singles result'
    elif basis_ins.sudoku.originalgrid[0][1] == 0:
        assert result == [('row', 2, [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0],
                                      [5, 0], [6, 0], [7, 0], [8, 0]])], \
            'Incorrect hidden_singles result'
    elif basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [('block', 3, [[0, 2], [1, 2], [0, 3], [1, 3]])], \
            'Incorrect hidden_singles result'
    elif basis_ins.sudoku.originalgrid[0][0] == 16:
        assert result == [('block', 1, [[0, 0], [1, 0], [2, 0], [3, 0], [0, 1],
                                        [1, 1], [2, 1], [3, 1], [0, 2], [1, 2],
                                        [2, 2], [3, 2], [0, 3], [1, 3], [2, 3], [3, 3]])], \
            'Incorrect hidden_singles result'
    else:
        assert result == [('block', 4, [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1],
                                        [2, 1], [0, 2], [1, 2], [2, 2]])], \
            'Incorrect hidden_singles result'


@pytest.mark.parametrize(
    "basis_ins",
    [
        [
    [1, 2, 0, 4, 5, 6, 7, 0, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 2, 3, 0, 0, 0, 0, 0, 0],
    [0, 5, 6, 0, 0, 0, 0, 0, 0],
    [7, 8, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 0, 0, 0, 0, 0, 0, 0, 0],
    [6, 0, 0, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ]],
    indirect=True,
)
def test_conjugatepairs(basis_ins):
    "Tests if the expected pairs are found"
    hint_ins = Hints(basis_ins)
    outcome = list(hint_ins.conjugatepairs())
    if basis_ins.sudoku.originalgrid[2][0] == 0:
        assert outcome == [
            ('row', ('double',0), [([0, 2], [3, 8]), ([0, 7], [3, 8])])], \
            'Incorrect outcome expected a row with [3,8]'
    elif basis_ins.sudoku.originalgrid[0][1] == 0:
        assert outcome == [
            ('column', ('double',0), [([1, 0], [2, 9]), ([8, 0], [2, 9])])], \
            'Incorrect outcome expected a column with [3,9]'
    else:
        assert outcome == [
            ('block', ('double',0), [([1, 0], [4, 9]), ([2, 2], [4, 9])])], \
            'Incorrect outcome expected a block with [4,9]'


@pytest.mark.parametrize(
    "basis_ins",
    [
        [
    [0, 8, 0, 0, 4, 5, 3, 2, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 2, 3, 4, 5, 0, 7, 8, 0]
        ]],
    indirect=True,
)

def test_sort_conjpairs(basis_ins):
    "Test if the order of the pairs is correct"
    hint_ins = Hints(basis_ins)
    outcome = list(hint_ins.sort_conjpairs())
    print(outcome)
    assert outcome[0][1][0] == 'double', 'Incorrect outcome expected pair type double'
    assert outcome[1][1][0] == 'triple', 'Incorrect outcome expected pair type triple'


@pytest.mark.parametrize(
    "basis_ins",
    [
        [
    [1, 2, 0, 4, 5, 6, 7, 8, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 7, 8, 9, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 2, 3, 7, 8, 9, 0, 0, 0],
    [0, 5, 6, 0, 0, 0, 0, 0, 0],
    [7, 8, 9, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 7, 0, 0, 0, 0, 0, 0],
    [5, 0, 8, 0, 0, 0, 0, 0, 0],
    [6, 0, 9, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [2, 4, 0, 0],
    [0, 0, 0, 2],
    [4, 0, 3, 0],
    [0, 0, 0, 4]
        ],
        [
       [16, 2, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
       [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
       [7, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
       [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
       [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
       [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
       [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
       [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
       [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
       [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
       [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
       [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
       [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
       [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
       [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
       [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
            ],
    indirect=True,
)
def test_hidden_pairs(basis_ins):
    """Test the hidden_pairs method."""
    hints = Hints(basis_ins)
    result = list(hints.hidden_pairs())[:2]
    if basis_ins.sudoku.originalgrid[2][0] == 0:
        assert result == [[[1, 0, 7, 8, 9], [1, 1, 7, 8, 9], [1, 2, 7, 8, 9]],
                          [[1, 3, 1, 2, 3], [1, 4, 1, 2, 3], [1, 5, 1, 2, 3]]], \
            'Incorrect hidden_pairs result'
    elif basis_ins.sudoku.originalgrid[0][1] == 0:
        assert result == [[[0, 1, 7, 8, 9], [1, 1, 7, 8, 9], [2, 1, 7, 8, 9]],
                          [[3, 1, 1, 2, 3], [4, 1, 1, 2, 3], [5, 1, 1, 2, 3]]], \
            'Incorrect hidden_pairs result'
    elif basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [[[1, 0, 1, 3], [1, 1, 1, 3]], [[1, 0, 1, 3], [3, 0, 1, 3]]], \
            'Incorrect hidden_pairs result'
    elif basis_ins.sudoku.originalgrid[0][0] == 16:
        assert result == [[[14, 3, 2, 8], [15, 3, 2, 8]]], 'Incorrect hidden_pairs result'
    else:
        assert result == [[[1, 6, 7, 8, 9], [1, 7, 7, 8, 9], [1, 8, 7, 8, 9]],
                          [[0, 6, 4, 5, 6], [0, 7, 4, 5, 6], [0, 8, 4, 5, 6]]], \
            'Incorrect hidden_pairs result'


@pytest.mark.parametrize(
    "basis_ins",
    [
        [
    [1, 2, 0, 4, 5, 6, 7, 8, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 7, 8, 9, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 2, 3, 7, 8, 9, 0, 0, 0],
    [0, 5, 6, 0, 0, 0, 0, 0, 0],
    [7, 8, 9, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 7, 0, 0, 0, 0, 0, 0],
    [5, 0, 8, 0, 0, 0, 0, 0, 0],
    [6, 0, 9, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [2, 4, 0, 0],
    [0, 0, 0, 2],
    [4, 0, 3, 0],
    [0, 0, 0, 4]
        ],
        [
       [16, 2, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
       [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
       [7, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
       [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
       [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
       [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
       [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
       [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
       [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
       [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
       [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
       [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
       [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
       [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
       [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
       [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
            ],
    indirect=True,
)
def test_pointing_pairs(basis_ins):
    """Test the pointing_pairs method."""
    hints = Hints(basis_ins)
    result = list(hints.pointing_pairs())[:2]
    if basis_ins.sudoku.originalgrid[2][0] == 0:
        assert result == [([1, 6], 1, 'row'), ([1, 7], 1, 'row')], \
            'Incorrect pointing_pairs result'
    elif basis_ins.sudoku.originalgrid[0][1] == 0:
        assert result == [([6, 1], 1, 'column'), ([7, 1], 1, 'column')], \
            'Incorrect pointing_pairs result'
    elif basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [([1, 2], 1, 'row')], 'Incorrect pointing_pairs result'
    elif basis_ins.sudoku.originalgrid[0][0] == 16:
        assert result == [([13, 3], 14, 'column'), ([14, 3], 14, 'column')], \
            'Incorrect pointing_pairs result'
    else:
        assert result == [([2, 6], 5, 'row'), ([2, 7], 5, 'row')], \
            'Incorrect pointing_pairs result'


@pytest.mark.parametrize(
    "basis_ins",
    [
        [
    [1, 2, 0, 4, 5, 6, 7, 8, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 7, 8, 9, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 2, 3, 7, 8, 9, 0, 0, 0],
    [0, 5, 6, 0, 0, 0, 0, 0, 0],
    [7, 8, 9, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 7, 0, 0, 0, 0, 0, 0],
    [5, 0, 8, 0, 0, 0, 0, 0, 0],
    [6, 0, 9, 0, 0, 0, 0, 0, 0],
    [7, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        [
    [2, 4, 0, 0],
    [0, 0, 0, 2],
    [4, 0, 3, 0],
    [0, 0, 0, 4]
        ],
        [
       [16, 2, 0, 0, 0, 10, 4, 14, 0, 7, 0, 9, 0, 13, 0, 0],
       [15, 6, 8, 11, 0, 0, 0, 0, 13, 0, 0, 5, 0, 10, 7, 0],
       [7, 0, 3, 0, 15, 0, 13, 11, 8, 0, 16, 1, 0, 4, 0, 0],
       [4, 0, 0, 0, 7, 1, 0, 0, 11, 0, 10, 0, 5, 16, 0, 3],
       [3, 15, 9, 0, 0, 0, 6, 0, 0, 13, 5, 0, 2, 0, 16, 0],
       [0, 0, 0, 12, 1, 14, 0, 4, 15, 0, 0, 10, 0, 0, 8, 0],
       [8, 5, 0, 0, 0, 0, 0, 13, 0, 2, 0, 14, 6, 0, 0, 10],
       [0, 2, 14, 6, 0, 15, 7, 0, 0, 8, 0, 0, 0, 0, 11, 4],
       [9, 12, 0, 0, 0, 0, 3, 0, 0, 10, 13, 0, 8, 1, 4, 0],
       [2, 0, 0, 16, 13, 0, 15, 0, 5, 0, 0, 0, 0, 0, 3, 7],
       [0, 11, 0, 0, 8, 0, 0, 9, 4, 0, 2, 15, 15, 0, 0, 0],
       [0, 14, 0, 4, 0, 16, 1, 0, 0, 3, 0, 0, 0, 5, 10, 9],
       [5, 0, 1, 13, 0, 12, 0, 15, 0, 0, 7, 3, 0, 0, 0, 16],
       [0, 0, 16, 0, 10, 13, 0, 7, 1, 6, 0, 8, 0, 2, 0, 0],
       [0, 3, 15, 0, 9, 0, 0, 1, 0, 0, 0, 0, 10, 7, 5, 13],
       [0, 0, 7, 0, 4, 0, 14, 0, 9, 5, 15, 0, 0, 0, 0, 11]]
            ],
    indirect=True,
)
def test_box_line_reduction(basis_ins):
    """Test the box_line_reduction method."""
    hints = Hints(basis_ins)
    result = list(hints.box_line_reduction())[:2]
    if basis_ins.sudoku.originalgrid[2][0] == 0:
        assert result == [([1, 6], 1, 'block via row'), ([1, 7], 1, 'block via row')], \
            'Incorrect box_line_reduction result'
    elif basis_ins.sudoku.originalgrid[0][1] == 0:
        assert result == [([6, 1], 1, 'block via column'), ([7, 1], 1, 'block via column')], \
            'Incorrect box_line_reduction result'
    elif basis_ins.sudoku.originalgrid[0][0] == 2:
        assert result == [([1, 2], 1, 'block via row')], 'Incorrect box_line_reduction result'
    elif basis_ins.sudoku.originalgrid[0][0] == 16:
        assert result == [([3, 14], 15, 'block via row'), ([0, 12], 1, 'block via row')], \
            'Incorrect box_line_reduction result'
    else:
        assert result == [([1, 6], 4, 'block via row'), ([1, 7], 4, 'block via row')], \
            'Incorrect box_line_reduction result'
